Clojure Notes


File I/O
Number 1: how to read an entire file into memory.

(slurp "/tmp/test.txt")
Not recommended when it is a really big file.

Number 2: how to read a file line by line.

(use 'clojure.java.io)
(with-open [rdr (reader "/tmp/test.txt")]
  (doseq [line (line-seq rdr)]
    (println line)))
The with-open macro takes care that the reader is closed at the end of the body. The reader function coerces a string (it can also do a URL, etc) into a BufferedReader. line-seq delivers a lazy seq. Demanding the next element of the lazy seq results into a line being read from the reader.

Number 3: how to write to a new file.

(use 'clojure.java.io)
(with-open [wrtr (writer "/tmp/test.txt")]
  (.write wrtr "Line to be written"))
Again, with-open takes care that the BufferedWriter is closed at the end of the body. Writer coerces a string into a BufferedWriter, that you use use via java interop: (.write wrtr "something").

You could also use spit, the opposite of slurp:

(spit "/tmp/test.txt" "Line to be written")
Number 4: append a line to an existing file.

(use 'clojure.java.io)
(with-open [wrtr (writer "/tmp/test.txt" :append true)]
  (.write wrtr "Line to be appended"))
Same as above, but now with append option.

Or again with spit, the opposite of slurp:

(spit "/tmp/test.txt" "Line to be written" :append true)


Special Forms
	quote
	if
	def
	let
	loop
	fn
	do
	recur


Macros
	' quote
	` syntax quote
	~ unquote
	~@ unquote splice

	variable capture, double evaluation
		# gensym
			avoids treading on an existing def
			also avoids re-running an expression when re-used
	macro infection


Channels
	(go
		(>! )
		(<! )
	)

Validations
	(defn validate
	 "Returns a map of vectors of errors for each key"
	 [to-validate validations]
	 (reduce (fn [errors validation]
	          (let [[fieldname validation-check-groups] validation
	                value (get to-validate fieldname)
	                error-messages (error-messages-for value validation-check-groups)]
	              (if  (empty? error-messages)
	                  errors))
	          (assoc errors fieldname error-messages))
	     {}
	     validations))

	(defmacro if-valid
	  "concise validation"
	  [to-validate validations errors-name & then-else]
	  `(let [~errors-name (validate ~to-validate ~validations)]
	    (if (empty? ~errors-name)
	      ~@then-else)))
