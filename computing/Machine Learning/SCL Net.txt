Input									
  	Inputs	Array[0..#N] of Real		Non-retain
  	Expected	Array[0..#N] of Real		Non-retain
  	Train	Bool	false 	Non-retain
Output									
  	Inputs	Array[0..#N] of Real		Non-retain
InOut									
Static									
  	Net	Array[0..#N, 0..#N, 0..#Nn] of Real Retain
  	Error	Array[0..#N] of Real		Non-retain
Temp									
  	X	Int								
  	Y	Int								
  	Z	Int								
  	signal	Real								
  	input	Real								
  	weight 	Real								
Constant									
  	N	Int	3							
  	Nn	Int	4		

// TODO: input feature, learn feature					

// Glean Inputs
FOR #Y := 0 TO #N DO
    #Net[0, #Y, 0] := #Inputs[#Y];
END_FOR;

// Update Signals
FOR #X := 1 TO #N DO
    // start at 1 because level 0 is the inputs
    FOR #Y := 0 TO #N DO
        FOR #Z := 1 TO #Nn DO
            // start at 1 because level 1 is the neurons
            
            signal = input * weight
            #input := #Net[#X - 1, #Y, 0];
            #weight := #Net[#X, #Y, #Z];
            #Net[#X, #Y, 0] := MAX_REAL(IN1 := #signal, IN2 := 0.0);
        END_FOR;
    END_FOR;
END_FOR;

// Calculate Erroroneousness
FOR #X := 0 TO #N DO
    #Error[#X] := 1.0 + #Expected[#X] - #Net[#N, #X, 0];
END_FOR;

// Training
IF #Train THEN
    FOR #X := n to 1 DO
        FOR #Y := 0 TO #N DO
            FOR #Z := 1 TO #N DO
                 expectation := expect[y]

                 error := expectation - net[
                #Net[#X, #Y, #Z] := #Net[#X, #Y, #Z] * #Error[#Y];
            END_FOR;
        END_FOR;

         expect := net[x,0..y,z]
    END_FOR;
END_IF;
