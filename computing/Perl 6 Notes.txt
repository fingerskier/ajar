Perl 6 Notes


# Single line comment

say #`(An embedded comment) "something"

=begin comment
	multi
	line
comment
=end comment


'plain string'

"string with'n $var stuff"


+		binary = addition
		unary = numeric coercion
-		binary = subtraction
		unary = negated numeric coercion
*		multiplication
**		power
/		division
div 	integer division
%		modulo
%%		divisibility
gcd		greatest common denominator
lcm		least common multiple
==		numeric equal
!=		numeric unequal
<		less than
>		greater than
<=		less than or equal
>=		greater than or equal
eq 		string equal
ne 		string not equal
=		assignment
~		string concatenation
x		string replication
~~		smart match (returns T/F or match?)
++		increment
--		decrement
?		coerce to a boolean
!		coerce (negated) to a boolean
..		range constructor
^..		internal range constructors
..^
^..^
^		~ this one implies a zero range floor
...		lazy list constructor
|		flattener
.=		enforce a function (as a mutator)
&		infix: junction

R*		precede any operator with 'R' to reverse it

Reduction Operation
	[+] 1,2,3,4,5	is the same as 	1+2+3+4+5


$var	scalar
@var	array
%var	hash


Scalars
	string
	integer
	rational

Arrays
	my @array 		# a basic array
	my @array[3]	# fixed size array
	my @array[3;2]	# multi-dimensional array

Hashes
	my %capitals = ('','','','')
	%capitals<Key>


Typing
	Perl6 is _gradually typed_

	Mu 		Perl6 root type
	Any
	Cool 	string or number?
	Str
	Int
	Rat 	rational number
	Bool


Perl6 is lexically scoped

Functions are immutable
	i.e. same arguments = same results ALWAYS

Mutators modify the calling object


Control
	if ... {	... } elsif { ... } else { ... }

	say 'Welcome' if ...;

	unless ... {	... }

	with ... {	... } orwith { ... }

	without ... {	...	}

	for @array -> $item { ... }

	given $var {
		when ... { ... }
		when Int { ... }
		default { ... }
	}

	loop (my $i=0; $i < 9; $I++) { ... }


Terminal
	$prompt = get;

	my $input = prompt "Prompt>> ";

	run 'echo', "hello $name";

	shell 'dir';


Files
	slurp ~ read data from a file
		my $data = slurp "datafile.txt"

	spurt ~ write data to a file

	dir ~ directory contents
	mkdir
	rmdir

	"file.txt".IO.e ~ exists?
	"file.txt".IO.f ~ isFile?
	"file.txt".IO.d ~ isDirectory?


Subroutines
	Without signature:
		sub asdf {
			...
			# final command is returned
		}

	With signature:
		sub hello (Str $name) {
			say "Hello " ~ $name ~ "!!!!"
		}

	Multiple dispatch:
		multi A ($X) { ... }

		multi A ($X, $Y) { ...; A($X); }

	Options:
		sub say-hello($name) {
			with $name { say "Hello " ~ $name }
			else { say "Howdy" }
		}

	Defaults:
		sub say-hello($name="Matt") {
			say "Hello " ~ $name;
		}

	Implicit Return:
		# returns the last thing
		sub squared ($x) { $x ** 2 }

	Explicit Return:
		sub squared ($x) { return $x ** 2 }

	Return Type Trait:
		sub squared ($x) returns Int { return $x ** 2 }

	Return Type Constraint:
		sub squared ($x --> Int) { return $x ** 2 }

		sub squared ($x --> Int:D) { return $x ** 2 }

	Functions are first-class things
		my @array = <1 2 3 4 5>;
		sub squared ($x) { $x ** 2 }
		say map(&squared, @array)

	Anonymity
		$x -> { ... }

	Chaining
		@array.unique.sort.reverse

		@array
		==> unique()
		==> sort()
		==> reverse()
		==> my @final-array
		;

		my @final-array
		<== reverse()
		<== sort()
		<== unique()
		<== @array
		;

	Hyper Operator
		@array>>.is-prime;	# returns a list of boolean results

	Junctions
		my $var = 2;
		if $var == 1|2|3 { say "The variable is 1 or 2 or 3" }

	Lazy Lists
		(1 ... 10)

		(1 ... Inf)

		(0,2 ... 10)

		(0, { $_ + 3 } ... 12);	# with a generator, produces (0 3 6 9 12)

		(0, { $_ + 3 } ...^ * > 10);	# stops on any value over 10

Object Orientation
	class based

	twigils - between a sigil and an attribute
		! declares an attribute to be private
		. generates an accessor

	class Human {
		my $.counter = 0;	# this is a class attribute, not an object attribute

		has $!name;	# these are object attributes
		has $!age;	# the bang means 'private'
		has $!sex is rw;	# thisn is read/write

		method new ($name, $age, $sex) {
			Human.counter++;

			self.bless(:$name, :$age, :$sex);
		}

		method !private_method { ... }
	}

	self.age 	# calls the .age accessor method
	$!age 	# is a direct call to the variable

	class Employee is Human { ... }

	methods can be overridden by inheriting classes

	submethod blah { ... }	# this disallows inheritance of this thing

	multiple inheritance is allowed


	Roles

	introspection
		.WHAT	# returns the object's class
		.^attributes	# returns a list of attributes w/ types
		.^methods	# returns a list of methods
		.^parents	# returns all parent classes
		~~		# true if the object is created from the given class

Exceptions
	try {
		# code goes in here
		# if anything goes wrong, the script will enter the below CATCH block
		# if nothing goes wrong the CATCH block will be ignored
		CATCH {
			when X::AdHoc { # exception of type X::AdHoc is thrown }
			when X::IO { # exception of type X::IO is thrown }
			when X::OS { # exception of type X::OS is thrown }
			default { # exception is thrown that doesn't belong to the above types }
		}
	}


Regex
=====
	~~
	/blah/
	m/blah/
	rx/blah/

	\		escapes the next character
	'x'		literal
	"x"		literalso
	\d 		digit character
	\D 		non-digit
	\h 		horizontal whitespace
	\H 		not horizontal whitespace
	\n 		new-line
	\N 		not new-line
	\s 		whitespace
	\S 		non-whitespace
	\t 		tab
	\T 		not a tab
	\v 		vertical whitespace
	\V 		not vertical whitespace
	\w 		any word character
	\W 		any non-word character
	<: >	unicode properties
	.		any single character
	?		zero or one quantifier
	*		zero or many quantifier
	+		one or more quantifier

	$/		match variable
	$/.prematch
	$/.postmatch
	$/.from
	$/.to
	
	my $email = 'john.doe@perl6.org';
	my regex many-letters { <:L>+ };
	my regex dot { \. };
	my regex at { \@ };
	my regex many-letters-numbers { <:L+:N>+ };

	if $email ~~ / <many-letters> <dot> <many-letters> <at> <many-letters-numbers> <dot> <many-letters> / {
		say $/ ~ " is a valid email";
	} else {
		say "This is not a valid email";
	}


Macros
======
	constant LOGGING = True;

	macro LOG($message) {
	  if LOGGING {
	    quasi { say {{{$message}}} };
	  }
	}

	macro	defines the content
	quasi	outputs code
	{{{}}}	injection


Delegation
==========
	has ~ introduces attributes

	is ~ applies a trait to an attribute
		 applies a class to an object

	handles ~ delegates an attribute to take on a method call

	does ~ indicates the role of an object

	but ~ ???

	$obj.HOW ~


Packages
========
	class

	role

	module


Files
=====
	dir 				current directory contents
	dir 'name'			contents of 'name' directory
	dir 'name', test	contents of 'name' directory grepped via test

	slurp 'filename'

	'filename'.IO ~~ :e 	# does file exist?
	'filename'.IO ~~ :d 	# is it a directory?
	'filename'.IO ~~ :f 	# is it a file?

	File::Find
	File::Tools

	open('new.file', :w).close;

	given open('foo', :w) {
		.say ('Hello world!');
		.close;
	}


Grammars
========
	Named Regexes
		my regex number { \d+ [ \. \d+ ]? }

		say "32.51" ~~ &number;

	Protoregexes
		grammar Calculator {
			token TOP { <calc-op> }

			proto 	rule calc-op			{*}
					rule calc-op:sym<add>	{<num> '+' <num>}
					rule calc-op:sym<sub>	{<num> '-' <num>}

			token num { \d+ }
		}

		calc Calculations {
			method TOP				($/) { make $<calc-op>.made; }
			method calc-op:sym<add>	($/) { make [+] $<num>; }
			method calc-op:sym<sub>	($/) { make ]-] $<num>; }
		}

		say Calculator.parse('2 + 3', actions => Calculations).made;

	Debugging
	---------
		Add one of these to the top of the file

		Grammar::Tracer ~ gives a tree-like trace output

		Grammar::Debugger ~ trace output that is debugger


Phasers
=======
	ENTER/LEAVE
	-----------
	ENTER ~ method is called
	LEAVE ~ method finished

	method issue_prompt($ctx, $cur_file) {
	    ENTER $in_prompt = True;
	    LEAVE $in_prompt = False;

	    # Lots of stuff here
	}

	INIT/END
	--------
	INIT ~ perform an action at program start time
	END ~ perform an action at program finish time

	sub log($msg) {
	    my $fh = INIT open("logfile", :w);
	    $fh.say($msg);
	    END $fh.close;
	}

	FIRST/NEXT/LAST
	---------------
	Loop phasers

	for %scores.kv -> $player, $score {
	    FIRST say "Score\tPlayer";
	    FIRST say "-----\t------";
	    LAST  say "-----\t------";

	    NEXT (state $best_score) max= $score;
	    LAST say "BEST SCORE: $best_score";

	    say "$score\t$player";
	}

	KEEP/UNDO
	---------
	LEAVE variants

	sub process($file) {
	    KEEP push @success, $file;
	    UNDO push @failure, $file;

	    my $fh = open($file);
	    # ...
	}


Debugger
========
	<enter>		|	proceeds
	s 			|	step-over
	so			|	step-out
	r 			|	run to unhandled exception
	rt 			|	run to handled exception


Variables
=========
	Specials
	--------
		$_	|	topic variable
		$/	|	regex match
		$!	|	exceptions


Quotation
=========
	A quote can be delimited by any set of characters...as long as they match

	Q[some stringy stuff]	plain string
	q 		escapes characters
	qq		escapes and interpolates
	qw		word quoting ~ returns a list
	qww		word quoting, preserves string objects
	qqw		word quoting with interpolation
	qqww	quote protection, interpolation, word-splitting
	qx		shell quoting
	qqx		shell quoting with interpolation
	Heredocs
		q:to/END/
			...
		END

		the terminator dictates the amount of indentation
